<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>堕拉贡</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-27T01:44:52.404Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hUmBlesOng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java反射</title>
    <link href="http://yoursite.com/2020/10/27/java%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2020/10/27/java%E5%8F%8D%E5%B0%84/</id>
    <published>2020-10-27T01:43:22.000Z</published>
    <updated>2020-10-27T01:44:52.404Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇文章，这里简单学一下 Java 的反射。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://blog.csdn.net/grandgrandpa/article/details/84832343">来源地址</a>JAVA反射机制是在<strong>运行状态</strong>中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>利用反射机制，可以在某些特殊地方上来调用 product 或者 private 的方法或类</li><li>用来对代码解耦（代替 new ）</li></ol><a id="more"></a><h2 id="反射机制的优缺点"><a href="#反射机制的优缺点" class="headerlink" title="反射机制的优缺点"></a>反射机制的优缺点</h2><ul><li>优点：<br>  运行期类型的判断，动态类加载，动态代理使用反射。</li><li>缺点：<br>  性能是一个问题，反射相当于一系列解释操作，通知jvm要做的事情，性能比直接的java代码要慢很多。</li></ul><h2 id="简单例子（工厂类）"><a href="#简单例子（工厂类）" class="headerlink" title="简单例子（工厂类）"></a>简单例子（工厂类）</h2><p>我们举一个简单例子，对代码进行解耦</p><p>示例：首先我们有一个 Animal 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次我们有两个类，一个 Cat，一个 Dog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面是基础类，接下来写工厂实现类</strong></p><p>工厂类构造方法是私有的，所以有个 private 无参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">FactoryDemo</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后普通 new 来生产对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">newInstance</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;cat&quot;</span>.equals(className))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;dog&quot;</span>.equals(className)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样来看，假如后面又新增了几个实现类，那么还需要修改工厂类，多写几个 if。那么如何通过反射来实现呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">newInstance2</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">    Animal a = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        a = (Animal) clazz.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这种写法就不会出现新增实现类还需要修改工厂类的情况了，只需要传入实现类的 class 类就好了，简简单单。</p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>Class 类又称“类的类”（Class of classes）。如果说类是对象的抽象和集合的话，那么 Class 类就是对类的抽象和集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class 类的对象代表了一个其他的类，比如下面的 catClass 代表了 Cat 类，dogClass 代表了 Dog 类</span></span><br><span class="line">Class catClass = Cat.class;</span><br><span class="line">CLass dogClass = Dog.class;</span><br></pre></td></tr></table></figure><blockquote><p>引申出多态：<br>假如上面的 Dog 继承自 Cat，那么初始化的时候执行 <code>Cat cat = new Dog();</code> 这条语句，最后获取 Class 类的时候，Class 对象仍然指向的是 Dog 类。<br>因此，我们随时能通过 Class 对象知道某个对象“真正”所属的类。无论我们对引用进行怎样的类型转换，对象本身所对应的 Class 对象都是同一个。当我们通过某个引用调用方法时，Java 总能找到正确的 Class 类中所定义的方法并且执行该 Class 类中的代码。由于 Class 对象的存在，Java 不会因为类型的向上转换而迷失</p></blockquote><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol><li><strong>第一种：</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; i1 = Class.forName(<span class="string">&quot;com.fanshe.Cat&quot;</span>);</span><br><span class="line">Cat o = (Cat) i1.newInstance();</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>第二种：</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cat i2 = <span class="keyword">new</span> Cat();</span><br><span class="line">Class&lt;?&gt; clz = i2.getClass();</span><br><span class="line">Cat o = clz.newInstance();</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>第三种：</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;? extends Cat&gt; clz = Cat.class;</span><br><span class="line">Cat o = clz.newInstance();</span><br></pre></td></tr></table></figure><blockquote><p>注意：newInstance() 方法默认调用的是类的无参构造方法，如果没有则会抛出异常</p></blockquote><h3 id="Class常用方法"><a href="#Class常用方法" class="headerlink" title="Class常用方法"></a>Class常用方法</h3><h4 id="获取类的构造方法"><a href="#获取类的构造方法" class="headerlink" title="获取类的构造方法"></a>获取类的构造方法</h4><ul><li>getDeclaredConstructor(Class&lt;?&gt;… parameterTypes) // 参数为构造函数的参数类型（可获取非 public 构造方法）</li><li>getDeclaredConstructors() // 同上，返回数组</li><li>getConstructor(Class&lt;?&gt;… parameterTypes) // 参数为构造函数的参数类型（只能获取 public 构造方法）</li><li>getConstructors() // 同上，返回数组</li></ul><p>示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 某构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String a, Double b)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">(String a)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取构造函数</span></span><br><span class="line">Constructor constructor = A.clas.getDeclaredConstructor(String.class, Double.class);</span><br><span class="line">Object a = constructor.newInstance(<span class="string">&quot;NO1&quot;</span>, <span class="number">11D</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果获取的是私有构造方法，则必须使用 getDeclaredConstructor() 方法，同时需要调用取消封装方法 setAccessible(true)</span></span><br><span class="line">Constructor&lt;?&gt; constructor1 = catClass.getDeclaredConstructor(String.class);</span><br><span class="line"><span class="comment">// 设置是否取消封装，取消封装后就可以调用私有属性了，包括（构造，方法，参数），</span></span><br><span class="line"><span class="comment">// 这个是取消java 的权限控制，而不是将其访问权限改为public</span></span><br><span class="line">constructor1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object b = constructor1.newInstance(<span class="string">&quot;NO2&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="获取类的成员方法"><a href="#获取类的成员方法" class="headerlink" title="获取类的成员方法"></a>获取类的成员方法</h4><ul><li>getDeclaredMethod(String name, Class[] params) // 根据方法名和参数类型获取方法（可获取非 public 构造方法）</li><li>getDeclaredMethods() // 同上，返回数组</li><li>getMethod(String name, Class[] params) // 根据方法名和参数类型获取方法（只能获取 public 构造方法）</li><li>getMethods() // 同上，返回数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; catClass = Class.forName(<span class="string">&quot;fanshe.Cat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        Object o = catClass.getDeclaredConstructor(String.class, String.class, String.class).newInstance(&quot;xy&quot;, &quot;<span class="number">18</span><span class="string">&quot;, &quot;</span>ss<span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // 获取eat方法，invoke()方法来执行</span></span><br><span class="line"><span class="string">        Method eatMethod = catClass.getMethod(&quot;</span>eat<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        eatMethod.invoke(o);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // 获取voice方法，invoke()方法来执行，getDeclaredMethod()可以访问私有方法</span></span><br><span class="line"><span class="string">        Method voiceMethod = catClass.getDeclaredMethod(&quot;</span>voice<span class="string">&quot;, String.class);</span></span><br><span class="line"><span class="string">        // 设置是否取消封装，取消封装后就可以调用私有属性了，包括（构造，方法，参数），</span></span><br><span class="line"><span class="string">        // 这个是取消java 的权限控制，而不是将其访问权限改为public</span></span><br><span class="line"><span class="string">        voiceMethod.setAccessible(true);</span></span><br><span class="line"><span class="string">        voiceMethod.invoke(o, &quot;</span>voice is cuteeee<span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // 获取所有方法数组</span></span><br><span class="line"><span class="string">        Method[] declaredMethods = catClass.getDeclaredMethods();</span></span><br><span class="line"><span class="string">        for (Method declaredMethod : declaredMethods) &#123;</span></span><br><span class="line"><span class="string">            if (&quot;</span>drink<span class="string">&quot;.equals(declaredMethod.getName())) &#123;</span></span><br><span class="line"><span class="string">                declaredMethod.invoke(o);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125; catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) &#123;</span></span><br><span class="line"><span class="string">        e.printStackTrace();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>输出：<br>cat eat rourou<br>voice is cuteeee<br>cat drink naicha</p><p>用到的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 🐥bys</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/23 16:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取类的成员变量"><a href="#获取类的成员变量" class="headerlink" title="获取类的成员变量"></a>获取类的成员变量</h4><ul><li>getDeclaredField(String name) // 根据变量名获取变量（可获取非 public 成员变量）</li><li>getDeclaredFields() // 同上，返回数组</li><li>getField(String name) // 根据变量名获取变量（只能获取 public 成员变量）</li><li>getFields() // 同上，返回数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; catClass = Class.forName(<span class="string">&quot;fanshe.Cat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        Object o = catClass.getDeclaredConstructor(String.class, String.class, String.class).newInstance(&quot;xy&quot;, &quot;<span class="number">18</span><span class="string">&quot;, &quot;</span>ss<span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // 获取dad参数</span></span><br><span class="line"><span class="string">        Field dadField = catClass.getField(&quot;</span>dad<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        dadField.set(o, &quot;</span>ss<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        // 参数值</span></span><br><span class="line"><span class="string">        System.out.println(dadField.get(o)); // ss</span></span><br><span class="line"><span class="string">        // 参数名</span></span><br><span class="line"><span class="string">        System.out.println(dadField.getName()); // dad</span></span><br><span class="line"><span class="string">        // 参数类型</span></span><br><span class="line"><span class="string">        System.out.println(dadField.getType()); // class java.lang.String</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        System.out.println(o); // Cat&#123;dad=&#x27;ss&#x27;, name=&#x27;xy&#x27;, age=&#x27;18&#x27;, lover=&#x27;ss&#x27;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // 获取所有参数，包括public,private,protected</span></span><br><span class="line"><span class="string">        Field[] declaredFields = catClass.getDeclaredFields();</span></span><br><span class="line"><span class="string">        for (Field declaredField : declaredFields) &#123;</span></span><br><span class="line"><span class="string">            // 设置是否取消封装，取消封装后就可以调用私有属性了，包括（构造，方法，参数），</span></span><br><span class="line"><span class="string">            // 这个是取消java 的权限控制，而不是将其访问权限改为public</span></span><br><span class="line"><span class="string">            declaredField.setAccessible(true);</span></span><br><span class="line"><span class="string">            declaredField.set(o, &quot;</span><span class="number">123</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        System.out.println(o); // Cat&#123;dad=&#x27;123&#x27;, name=&#x27;123&#x27;, age=&#x27;123&#x27;, lover=&#x27;123&#x27;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125; catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchFieldException e) &#123;</span></span><br><span class="line"><span class="string">        e.printStackTrace();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>上面代码中使用到的 model 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 🐥bys</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/23 16:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String dad;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String lover;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, String age, String lover)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.lover = lover;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Cat</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat eat rourou&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat drink naicha&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">voice</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;dad=&#x27;&quot;</span> + dad + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, lover=&#x27;&quot;</span> + lover + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他-Class-相关知识"><a href="#其他-Class-相关知识" class="headerlink" title="其他 Class 相关知识"></a>其他 Class 相关知识</h2><h3 id="动态加载类"><a href="#动态加载类" class="headerlink" title="动态加载类"></a>动态加载类</h3><p>我们通过 new 方式来创建对象和通过 Class 来创建对象的不同之处是：Class 创建的对象是<strong>动态加载类</strong></p><blockquote><p>java 分为编译期和运行期，有些异常也分为 编译前异常和运行时异常 ，即有些异常在项目启动的时候就会抛出来，而有些则会在编译期抛出来<br>而类似的，编译时刻加载的类叫静态加载类，运行时刻加载的类称为动态加载类</p></blockquote><p>下面来个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BianyiDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;XiaoZhuYu&quot;</span>.equals(args[<span class="number">0</span>])) &#123;</span><br><span class="line">Pig xy = <span class="keyword">new</span> Pig;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候，我们没有创建 Pig 对象，进入 cmd 编译该类，会报错，这就是静态编译类的特点，即必须在编译时期必须加载所有用到的类<br>![20201026175735983_2766.png](<a href="https://i.loli.net/2020/10/27/OrJeYUbR5fMzZEv.png">https://i.loli.net/2020/10/27/OrJeYUbR5fMzZEv.png</a> =599x)</p><p>如果我们想在运行时想用哪个就用哪个，就需要改进一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class BianyiDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">            Class clz &#x3D; Class.forName(args[0]);</span><br><span class="line">            Object o &#x3D; clz.newInstance();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们直接编译，不会报错了</p><p>假如我们想要获取 Pig 对象，则只需要编译一个 Pig 类，而不需要重新编译该类，这就是动态编译类的特点。</p><p>假如我们有个 Animal 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 Pig 对象和 Cat 对象都实现了 Animal 接口的话，这时候只需要根据传参的不同来决定执行哪个类方法，实现了代码功能的解耦，后续再次修改也不需要修改之前的代码了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>平时开发用不到，但是学一学又没有坏处。</p><p>当然应用到的场景也有，比如 Java 的注解原理就是反射，下一篇稍微学习一下。</p><p>代码地址：<a href="https://github.com/hUmBlesOng/java-learn/tree/master/src/main/java/fanshe">https://github.com/hUmBlesOng/java-learn/tree/master/src/main/java/fanshe</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接上一篇文章，这里简单学一下 Java 的反射。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/grandgrandpa/article/details/84832343&quot;&gt;来源地址&lt;/a&gt;JAVA反射机制是在&lt;strong&gt;运行状态&lt;/strong&gt;中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。&lt;/p&gt;
&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;利用反射机制，可以在某些特殊地方上来调用 product 或者 private 的方法或类&lt;/li&gt;
&lt;li&gt;用来对代码解耦（代替 new ）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
    <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java中的深克隆和浅克隆</title>
    <link href="http://yoursite.com/2020/09/02/Java%E4%B8%AD%E7%9A%84%E6%B7%B1%E5%85%8B%E9%9A%86%E5%92%8C%E6%B5%85%E5%85%8B%E9%9A%86/"/>
    <id>http://yoursite.com/2020/09/02/Java%E4%B8%AD%E7%9A%84%E6%B7%B1%E5%85%8B%E9%9A%86%E5%92%8C%E6%B5%85%E5%85%8B%E9%9A%86/</id>
    <published>2020-09-02T01:45:31.000Z</published>
    <updated>2020-09-02T11:03:56.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是克隆"><a href="#什么是克隆" class="headerlink" title="什么是克隆"></a>什么是克隆</h2><p>即将已有数据<strong>完全</strong>拷贝到一个新对象中。</p><h2 id="深克隆和浅克隆"><a href="#深克隆和浅克隆" class="headerlink" title="深克隆和浅克隆"></a>深克隆和浅克隆</h2><p>在 <code>java</code> 中我们有基本数据类型（八大类型）以及引用数据类型。<br>而这两种类型存放在内存中的位置是不同的，基本类型存放在<strong>栈</strong>中，而引用类型存放在<strong>堆</strong>中。</p><p>所以由于以上原因，出现了两种克隆方式，深克隆和浅克隆。</p><a id="more"></a><p>在 <code>java</code> 中，每个实体类都是继承自 <code>java.lang.Object</code> 父类，<code>Object</code> 类有一个 <code>clone()</code> 方法，能够支持对象的克隆。<br>而通过 <code>clone()</code> 方法生成的对象和 <code>new</code> 出来的对象区别就是他保留着拷贝对象的属性值。</p><p>我们先定义一个对象结构，A中引用了B，B引用了B。现在我们有一个a对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    C c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h3><p>浅克隆指拷贝对象的时候仅仅拷贝对象本身（包括基本类型变量），而不拷贝其中的引用类型变量。<br>比如，a 对象中有 b 引用类型变量，b 中有 c 引用类型变量。<br>之后浅克隆了 a 对象，得到 a1 对象，其中 a1 对象的变量 b 是直接引用的 a 对象中的 b 变量，而不是新建一个 b 变量。<br>![](_v_images/20200901223533696_22389.png =464x)</p><h3 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h3><p>深克隆指拷贝对象的时候不仅拷贝对象本身（包括基本类型变量），而且同时拷贝其中的引用类型变量。<br>比如，a 对象中有 b 引用类型变量，b 中有 c 引用类型变量。<br>之后深克隆了 a 对象，得到 a1 对象，同时，内部的引用对象也进行了一次拷贝，a1 对象中的变量 b1 拷贝自 b 变量，c1 变量拷贝自 c 变量。<br>![](_v_images/20200901224118510_6685.png =428x)</p><h2 id="如何实现克隆"><a href="#如何实现克隆" class="headerlink" title="如何实现克隆"></a>如何实现克隆</h2><p>我们可以手动 new 一个对象，然后将原来的值一个个的 set 进去，但是这样效率比较低，还有就是使用 clone 方法，使用 clone 需要满足以下条件：</p><ul><li>实现 <code>Cloneable</code> 接口</li><li>使用 public 访问修饰符重新定义 clone 方法。</li></ul><p>假如说我们直接对某一个对象进行 <code>A a2 = a</code> 直接赋值之后，我们修改了 a 中的属性，那么 a2 的变量的值也会跟着一起改变，这种不是克隆，是 a2 直接指向了 a 的地址。</p><h3 id="浅克隆实例"><a href="#浅克隆实例" class="headerlink" title="浅克隆实例"></a>浅克隆实例</h3><p>首先我们先定义一些对象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 克隆的对象必须实现Cloneable这个接口，而且需要重写clone方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> number, B b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Pig pig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pig <span class="title">getPig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPig</span><span class="params">(Pig pig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pig = pig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(Pig pig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pig = pig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;哼哼~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，A对象有一个 number 的基本类型变量，和一个 b 的引用变量，b 中有一个 gxy 的引用变量。</p><p>那么执行下面的克隆代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java克隆实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bys</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/1 22:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCloneDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Pig gxy = <span class="keyword">new</span> Pig();</span><br><span class="line">        gxy.out();</span><br><span class="line"></span><br><span class="line">        B b = <span class="keyword">new</span> B(gxy);</span><br><span class="line">        A a = <span class="keyword">new</span> A(<span class="number">100</span>, b);</span><br><span class="line">        <span class="comment">// 克隆a对象</span></span><br><span class="line">        A a1 = (A) a.clone();</span><br><span class="line">        System.out.println(<span class="string">&quot;---克隆前&quot;</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(a.getB());</span><br><span class="line">        System.out.println(a.getNumber());</span><br><span class="line">        System.out.println(a.getB().getPig());</span><br><span class="line">        System.out.println(<span class="string">&quot;---克隆后&quot;</span>);</span><br><span class="line">        System.out.println(a1);</span><br><span class="line">        System.out.println(a1.getB());</span><br><span class="line">        System.out.println(a1.getNumber());</span><br><span class="line">        System.out.println(a1.getB().getPig());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>克隆后输出的值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">哼哼~~</span><br><span class="line">---克隆前</span><br><span class="line">javaapi.A@1b6d3586</span><br><span class="line">javaapi.B@4554617c</span><br><span class="line">100</span><br><span class="line">javaapi.Pig@74a14482</span><br><span class="line">---克隆后</span><br><span class="line">javaapi.A@1540e19d</span><br><span class="line">javaapi.B@4554617c</span><br><span class="line">100</span><br><span class="line">javaapi.Pig@74a14482</span><br></pre></td></tr></table></figure><p>可以看出来，a 和 a1 的两个地址值是不同的，而引用变量的地址是相同的。</p><h3 id="深克隆实例"><a href="#深克隆实例" class="headerlink" title="深克隆实例"></a>深克隆实例</h3><p>同样的定义一批实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AA</span><span class="params">(BB bb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bb = bb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BB bb;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BB <span class="title">getBb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBb</span><span class="params">(BB bb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bb = bb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        AA o = (AA) <span class="keyword">super</span>.clone();</span><br><span class="line">        o.bb = (BB) bb.clone();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setI</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BB</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中AA类包含一个BB的引用类型变量，BB中有一个 i 的int类型变量。</p><p>执行克隆方法，查看结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java克隆实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bys</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/1 22:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCloneDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---深克隆前&quot;</span>);</span><br><span class="line">        AA aa = <span class="keyword">new</span> AA(<span class="keyword">new</span> BB(<span class="number">1</span>));</span><br><span class="line">        AA aa1 = (AA) aa.clone();</span><br><span class="line">        System.out.println(aa);</span><br><span class="line">        System.out.println(aa.getBb());</span><br><span class="line">        System.out.println(aa.getBb().getI());</span><br><span class="line">        System.out.println(<span class="string">&quot;---深克隆后&quot;</span>);</span><br><span class="line">        System.out.println(aa1);</span><br><span class="line">        System.out.println(aa1.getBb());</span><br><span class="line">        System.out.println(aa1.getBb().getI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---深克隆前</span><br><span class="line">javaapi.AA@677327b6</span><br><span class="line">javaapi.BB@14ae5a5</span><br><span class="line">1</span><br><span class="line">---深克隆后</span><br><span class="line">javaapi.AA@7f31245a</span><br><span class="line">javaapi.BB@6d6f6e28</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>可以看到，不仅仅是复制了基本变量，连对象的地址都变了，很明显不是同一个对象，而是新建了新的对象。</p><p><strong>综上，深克隆和浅克隆的区别就很明显了，深克隆是能复制引用类型变量和基本类型变量，而浅克隆仅仅能复制基本类型变量，引用类型变量仍引用的原来的对象。</strong></p><h3 id="通过序列化（Serializable）实现深克隆"><a href="#通过序列化（Serializable）实现深克隆" class="headerlink" title="通过序列化（Serializable）实现深克隆"></a>通过序列化（Serializable）实现深克隆</h3><blockquote><p>把对象写到流里的过程是串行化（Serilization）过程，但是在Java程序师圈子里又非常形象地称为“冷冻”或者“腌咸菜（picking）”过程；而把对象从流中读出来的并行化（Deserialization）过程则叫做 “解冻”或者“回鲜(depicking)”过程。</p></blockquote><p>通过实现 Cloneable 接口来实现深克隆比较繁琐，重写 clone方法很复杂，这时候我们可以用 Serializable 来解决。</p><p>使用 Serializable，可以把对象写入到流里，然后再从流里读出来，就可以深克隆一个对象。</p><blockquote><p>注意：</p><ol><li>写在流里的是对象的一个拷贝，真正的对象还在内存中。</li><li>对象以及对象内部所有引用到的对象都是可序列化的。</li><li>如果不想序列化，则需要使用transient来修饰。</li></ol></blockquote><p>我们先实现序列化和反序列化类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeepClone</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2658204965442453698L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oss = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line"></span><br><span class="line">        oss.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们把所有实体类继承该类，同时也相当于实现了 <code>Serializable</code> 接口，实现了序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zoo</span> <span class="keyword">extends</span> <span class="title">DeepClone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">293932665050190715L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">getAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zoo</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">extends</span> <span class="title">DeepClone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">293932665050190715L</span>;</span><br><span class="line">    <span class="keyword">private</span> Pig1 pig1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pig1 <span class="title">getPig1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pig1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPig1</span><span class="params">(Pig1 pig1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pig1 = pig1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(Pig1 pig1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pig1 = pig1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig1</span> <span class="keyword">extends</span> <span class="title">DeepClone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;哼哼哼~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面执行我们的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java克隆实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bys</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/1 22:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCloneDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Pig1 gxysz = <span class="keyword">new</span> Pig1();</span><br><span class="line">        gxysz.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;---序列化深克隆前&quot;</span>);</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal(gxysz);</span><br><span class="line">        Zoo zoo = <span class="keyword">new</span> Zoo(animal);</span><br><span class="line">        Zoo zoo1 = (Zoo) zoo.deepClone();</span><br><span class="line">        System.out.println(zoo);</span><br><span class="line">        System.out.println(zoo.getAnimal());</span><br><span class="line">        System.out.println(zoo.getAnimal().getPig1());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---序列化深克隆后&quot;</span>);</span><br><span class="line">        System.out.println(zoo1);</span><br><span class="line">        System.out.println(zoo1.getAnimal());</span><br><span class="line">        System.out.println(zoo1.getAnimal().getPig1());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果，可以看到引用类的地址是不同的，同样实现了深克隆：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">哼哼哼~~</span><br><span class="line">---序列化深克隆前</span><br><span class="line">javaapi.Zoo@61bbe9ba</span><br><span class="line">javaapi.Animal@610455d6</span><br><span class="line">javaapi.Pig1@266474c2</span><br><span class="line">---序列化深克隆后</span><br><span class="line">javaapi.Zoo@1d81eb93</span><br><span class="line">javaapi.Animal@7291c18f</span><br><span class="line">javaapi.Pig1@34a245ab</span><br></pre></td></tr></table></figure><h2 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h2><p>在引用类中，<code>String</code> 类是一个特例，因为他是 <code>final</code> 不可变的，所以每次执行修改或者 <code>clone</code> 对象的时候，实际上是指向了新的内存空间，对原对象没有影响，即类似于深克隆。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>平时开发中我们是用不到Cloneable的，比较繁琐，还是推荐使用 Apache Commons 包或者 Spring 框架自带的克隆方法。</p><p>浅克隆：<code>BeanUtils.cloneBean(Object obj);    BeanUtils.copyProperties(S,T);</code><br>深克隆：<code>SerializationUtils.clone(T object);</code></p><p>BeanUtils利用的是反射机制将属性和方法复制到target类的方式。<br>SerializationUtils使用的是上面的序列化方式实现的深克隆，需要克隆的对象必须要实现序列化接口（Serializable）。</p><p>上面提到了反射机制，正好下一篇简单学习一下java的反射机制。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是克隆&quot;&gt;&lt;a href=&quot;#什么是克隆&quot; class=&quot;headerlink&quot; title=&quot;什么是克隆&quot;&gt;&lt;/a&gt;什么是克隆&lt;/h2&gt;&lt;p&gt;即将已有数据&lt;strong&gt;完全&lt;/strong&gt;拷贝到一个新对象中。&lt;/p&gt;
&lt;h2 id=&quot;深克隆和浅克隆&quot;&gt;&lt;a href=&quot;#深克隆和浅克隆&quot; class=&quot;headerlink&quot; title=&quot;深克隆和浅克隆&quot;&gt;&lt;/a&gt;深克隆和浅克隆&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;java&lt;/code&gt; 中我们有基本数据类型（八大类型）以及引用数据类型。&lt;br&gt;而这两种类型存放在内存中的位置是不同的，基本类型存放在&lt;strong&gt;栈&lt;/strong&gt;中，而引用类型存放在&lt;strong&gt;堆&lt;/strong&gt;中。&lt;/p&gt;
&lt;p&gt;所以由于以上原因，出现了两种克隆方式，深克隆和浅克隆。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="克隆" scheme="http://yoursite.com/tags/%E5%85%8B%E9%9A%86/"/>
    
  </entry>
  
  <entry>
    <title>Java浮点数精度丢失问题</title>
    <link href="http://yoursite.com/2020/08/14/Java%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/08/14/Java%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-14T10:00:00.000Z</published>
    <updated>2020-08-17T09:15:21.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-精度丢失示例"><a href="#1-精度丢失示例" class="headerlink" title="1. 精度丢失示例"></a>1. 精度丢失示例</h2><p>java做浮点数的除法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">double</span> k = (<span class="keyword">double</span>)a/b;</span><br><span class="line">    <span class="comment">// 四舍五入保留两位小数</span></span><br><span class="line">    <span class="keyword">double</span> i = <span class="keyword">new</span> BigDecimal(k).setScale(<span class="number">2</span>,java.math.BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面的代码输出的结果是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7.000000000000001</span><br></pre></td></tr></table></figure><p>还有另外一个的例子，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="number">1.2</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.19999999999999996</span><br></pre></td></tr></table></figure><h2 id="2-出现原因"><a href="#2-出现原因" class="headerlink" title="2. 出现原因"></a>2. 出现原因</h2><p>出现这个问题的原因，这篇文章已经讲的很清楚了：<a href="https://www.cnblogs.com/backwords/p/9826773.html">Java 浮点数精度丢失</a><br>简单来说，无论是十进制还是二进制，计算机对这些数进行计算的时候，都是通过不同精度单位的加权（即乘以系数）和来计算的，比如十进制的 <code>15.23</code> 就是 <code>1*10(1次方)+5*10(0次方)+2*10(-1次方)+0.03(-2次方)</code> 得来的，而二进制的 <code>10.101</code> 则是 <code>1*2(1次方)+0*2(0次方)+1*2(-1次方)+0*2(-2次方)+1*2(-3次方)</code> 得到的<br>而上面的 <code>1/15</code> 在计算机那边不能整除，得到结果 <code>0.06666667</code>，得到他的公式 <code>6*10(-2次方)+6*10(-2次方)+6*10(-2次方)+6*10(-2次方)...</code>，所以这个数字在计算机中出现了精度丢失，计算机只能无限接近这个数值，不能完全展示这个数字</p><h2 id="3-java解决办法"><a href="#3-java解决办法" class="headerlink" title="3. java解决办法"></a>3. java解决办法</h2><p>推荐办法是直接使用 <code>java.math.BigDecimal</code> 类来进行计算，对于一些精度要求比较高的场景，比如金额交易场景下，还是强制使用 <code>BigDecimal</code> 的</p><blockquote><p>有可能你会问了，上面不是在浮点数计算完之后使用 <code>BigDecimal</code> 来转换保留小数了吗，为什么还会出现这种情况呢？<br>就是直接使用 <code>new BigDecimal(Double)</code> 构造函数来生成的话仍然会出现精度丢失问题，所以需要注意，使用 <code>BigDecimal</code> 时，一定要将数值先转换成 <strong>字符串</strong>，或者使用 <code>BigDecimal</code> 的 <code>valueOf</code> 方法<br>比如，直接存一个浮点数0.1 <code>BigDecimal b = new BigDecimal(0.1f);</code>，实际上存的数据是 <em>0.100000001490116119384765625</em></p></blockquote><p>那么接下来，我们最开始的错误代码，可以改成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">double</span> k = (<span class="keyword">double</span>)a/b;</span><br><span class="line">    <span class="comment">// 四舍五入保留两位小数</span></span><br><span class="line">    <span class="keyword">double</span> i = BigDecimal().valueOf(k).setScale(<span class="number">2</span>,java.math.BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后输出 <code>0.07</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-精度丢失示例&quot;&gt;&lt;a href=&quot;#1-精度丢失示例&quot; class=&quot;headerlink&quot; title=&quot;1. 精度丢失示例&quot;&gt;&lt;/a&gt;1. 精度丢失示例&lt;/h2&gt;&lt;p&gt;java做浮点数的除法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; k = (&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)a/b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 四舍五入保留两位小数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; i = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigDecimal(k).setScale(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,java.math.BigDecimal.ROUND_HALF_UP).doubleValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="BigDecimal" scheme="http://yoursite.com/tags/BigDecimal/"/>
    
    <category term="精度丢失" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/"/>
    
  </entry>
  
  <entry>
    <title>小老鼠</title>
    <link href="http://yoursite.com/2020/01/12/%E5%B0%8F%E8%80%81%E9%BC%A0/"/>
    <id>http://yoursite.com/2020/01/12/%E5%B0%8F%E8%80%81%E9%BC%A0/</id>
    <published>2020-01-11T17:27:19.000Z</published>
    <updated>2020-08-18T02:38:58.361Z</updated>
    
    <content type="html"><![CDATA[<div class="mouse"><!-- 添加老鼠插件 --><object type="application/x-shockwave-flash" style="outline:none;" data="https://cdn.abowman.com/widgets/hamster/hamster.swf?up_bodyColor=f0e9cc&up_feetColor=D4C898&up_eyeColor=000567&up_wheelSpokeColor=DEDEDE&up_wheelColor=FFFFFF&up_waterColor=E0EFFF&up_earColor=b0c4de&up_wheelOuterColor=FF4D4D&up_snoutColor=F7F4E9&up_bgColor=F0E4E4&up_foodColor=cba920&up_wheelCenterColor=E4EB2F&up_tailColor=E6DEBE&" width="200" height="160"><param name="movie" value="https://cdn.abowman.com/widgets/hamster/hamster.swf?up_bodyColor=f0e9cc&up_feetColor=D4C898&up_eyeColor=000567&up_wheelSpokeColor=DEDEDE&up_wheelColor=FFFFFF&up_waterColor=E0EFFF&up_earColor=b0c4de&up_wheelOuterColor=FF4D4D&up_snoutColor=F7F4E9&up_bgColor=F0E4E4&up_foodColor=cba920&up_wheelCenterColor=E4EB2E&up_tailColor=E6DEBE&"><param name="AllowScriptAccess" value="always"><param name="wmode" value="opaque"></object></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;mouse&quot;&gt;
&lt;!-- 添加老鼠插件 --&gt;
&lt;object type=&quot;application/x-shockwave-flash&quot; style=&quot;outline:none;&quot; data=&quot;https://cdn.abowman.com/widgets</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简单使用</title>
    <link href="http://yoursite.com/2020/01/09/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/01/09/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2020-01-09T02:18:01.290Z</published>
    <updated>2020-08-18T02:38:48.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure><h3 id="快速提交"><a href="#快速提交" class="headerlink" title="快速提交"></a>快速提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; title=&quot;快速开始&quot;&gt;&lt;/a&gt;快速开始&lt;/h2&gt;&lt;h3 id=&quot;创建文章&quot;&gt;&lt;a href=&quot;#创建文章&quot; class=&quot;headerlink&quot; title=&quot;创建文章&quot;&gt;&lt;/a&gt;创建文章&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;快速提交&quot;&gt;&lt;a href=&quot;#快速提交&quot; class=&quot;headerlink&quot; title=&quot;快速提交&quot;&gt;&lt;/a&gt;快速提交&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo generate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
    <category term="Hexo使用" scheme="http://yoursite.com/tags/Hexo%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
</feed>
