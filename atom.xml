<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>堕拉贡</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-02T01:47:19.616Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hUmBlesOng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的深克隆和浅克隆</title>
    <link href="http://yoursite.com/2020/09/02/Java%E4%B8%AD%E7%9A%84%E6%B7%B1%E5%85%8B%E9%9A%86%E5%92%8C%E6%B5%85%E5%85%8B%E9%9A%86/"/>
    <id>http://yoursite.com/2020/09/02/Java%E4%B8%AD%E7%9A%84%E6%B7%B1%E5%85%8B%E9%9A%86%E5%92%8C%E6%B5%85%E5%85%8B%E9%9A%86/</id>
    <published>2020-09-02T01:45:31.000Z</published>
    <updated>2020-09-02T01:47:19.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是克隆"><a href="#什么是克隆" class="headerlink" title="什么是克隆"></a>什么是克隆</h2><p>即将已有数据<strong>完全</strong>拷贝到一个新对象中。</p><h2 id="深克隆和浅克隆"><a href="#深克隆和浅克隆" class="headerlink" title="深克隆和浅克隆"></a>深克隆和浅克隆</h2><p>在 <code>java</code> 中我们有基本数据类型（八大类型）以及引用数据类型。<br>而这两种类型存放在内存中的位置是不同的，基本类型存放在<strong>栈</strong>中，而引用类型存放在<strong>堆</strong>中。</p><p>所以由于以上原因，出现了两种克隆方式，深克隆和浅克隆。</p><p>在 <code>java</code> 中，每个实体类都是继承自 <code>java.lang.Object</code> 父类，<code>Object</code> 类有一个 <code>clone()</code> 方法，能够支持对象的克隆。<br>而通过 <code>clone()</code> 方法生成的对象和 <code>new</code> 出来的对象区别就是他保留着拷贝对象的属性值。</p><a id="more"></a><p>我们先定义一个对象结构，a中引用了b，b引用了c。现在我们有一个A对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    C c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h3><p>浅克隆指拷贝对象的时候仅仅拷贝对象本身（包括基本类型变量），而不拷贝其中的引用类型变量。<br>比如，a 对象中有 b 引用类型变量，b 中有 c 引用类型变量。<br>之后浅克隆了 a 对象，得到 a1 对象，其中 a1 对象的变量 b 是直接引用的 a 对象中的 b 变量，而不是新建一个 b 变量。<br>![](<em>v</em>images/20200901223533696_22389.png =464x)</p><h3 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h3><p>深克隆指拷贝对象的时候不仅拷贝对象本身（包括基本类型变量），而且同时拷贝其中的引用类型变量。<br>比如，a 对象中有 b 引用类型变量，b 中有 c 引用类型变量。<br>之后深克隆了 a 对象，得到 a1 对象，同时，内部的引用对象也进行了一次拷贝，a1 对象中的变量 b1 拷贝自 b 变量，c1 变量拷贝自 c 变量<br>![](<em>v</em>images/20200901224118510_6685.png =428x)</p><h2 id="如何实现克隆"><a href="#如何实现克隆" class="headerlink" title="如何实现克隆"></a>如何实现克隆</h2><p>我们可以手动 new 一个对象，然后将原来的值一个个的 set 进去，但是这样效率比较低，还有就是使用 clone 方法，使用 clone 需要满足以下条件：</p><ol><li>实现 <code>Cloneable</code> 接口</li><li>使用 public 访问修饰符重新定义 clone 方法。</li></ol><p>假如说我们直接对某一个对象进行 <code>A a2 = a</code> 直接赋值之后，我们修改了 a 中的属性，那么 a2 的变量的值也会跟着一起改变，这种不是克隆，是 a2 直接指向了 a 的地址。</p><h3 id="浅克隆实例"><a href="#浅克隆实例" class="headerlink" title="浅克隆实例"></a>浅克隆实例</h3><p>首先我们先定义一些对象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 克隆的对象必须实现Cloneable这个接口，而且需要重写clone方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> number, B b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Pig pig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pig <span class="title">getPig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPig</span><span class="params">(Pig pig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pig = pig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(Pig pig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pig = pig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"哼哼~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，A对象有一个 number 的基本类型变量，和一个 b 的引用变量，b 中有一个 gxy 的引用变量</p><p>那么执行下面的克隆代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java克隆实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bys</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/1 22:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCloneDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Pig gxy = <span class="keyword">new</span> Pig();</span><br><span class="line">        gxy.out();</span><br><span class="line"></span><br><span class="line">        B b = <span class="keyword">new</span> B(gxy);</span><br><span class="line">        A a = <span class="keyword">new</span> A(<span class="number">100</span>, b);</span><br><span class="line">        <span class="comment">// 克隆a对象</span></span><br><span class="line">        A a1 = (A) a.clone();</span><br><span class="line">        System.out.println(<span class="string">"---克隆前"</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(a.getB());</span><br><span class="line">        System.out.println(a.getNumber());</span><br><span class="line">        System.out.println(a.getB().getPig());</span><br><span class="line">        System.out.println(<span class="string">"---克隆后"</span>);</span><br><span class="line">        System.out.println(a1);</span><br><span class="line">        System.out.println(a1.getB());</span><br><span class="line">        System.out.println(a1.getNumber());</span><br><span class="line">        System.out.println(a1.getB().getPig());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>克隆后输出的值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">哼哼~~</span><br><span class="line">---克隆前</span><br><span class="line">javaapi.A@1b6d3586</span><br><span class="line">javaapi.B@4554617c</span><br><span class="line">100</span><br><span class="line">javaapi.Pig@74a14482</span><br><span class="line">---克隆后</span><br><span class="line">javaapi.A@1540e19d</span><br><span class="line">javaapi.B@4554617c</span><br><span class="line">100</span><br><span class="line">javaapi.Pig@74a14482</span><br></pre></td></tr></table></figure><p>可以看出来，a 和 a1 的两个地址值是不同的，而引用变量的地址是相同的</p><h3 id="深克隆实例"><a href="#深克隆实例" class="headerlink" title="深克隆实例"></a>深克隆实例</h3><p>同样的定义一批实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AA</span><span class="params">(BB bb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bb = bb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BB bb;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BB <span class="title">getBb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBb</span><span class="params">(BB bb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bb = bb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        AA o = (AA) <span class="keyword">super</span>.clone();</span><br><span class="line">        o.bb = (BB) bb.clone();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setI</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BB</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中AA类包含一个BB的引用类型变量，BB中有一个 i 的int类型变量</p><p>执行克隆方法，查看结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java克隆实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bys</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/1 22:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCloneDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---深克隆前"</span>);</span><br><span class="line">        AA aa = <span class="keyword">new</span> AA(<span class="keyword">new</span> BB(<span class="number">1</span>));</span><br><span class="line">        AA aa1 = (AA) aa.clone();</span><br><span class="line">        System.out.println(aa);</span><br><span class="line">        System.out.println(aa.getBb());</span><br><span class="line">        System.out.println(aa.getBb().getI());</span><br><span class="line">        System.out.println(<span class="string">"---深克隆后"</span>);</span><br><span class="line">        System.out.println(aa1);</span><br><span class="line">        System.out.println(aa1.getBb());</span><br><span class="line">        System.out.println(aa1.getBb().getI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过序列化（Serializable）实现深克隆"><a href="#通过序列化（Serializable）实现深克隆" class="headerlink" title="通过序列化（Serializable）实现深克隆"></a>通过序列化（Serializable）实现深克隆</h3><blockquote><p>把对象写到流里的过程是串行化（Serilization）过程，但是在Java程序师圈子里又非常形象地称为“冷冻”或者“腌咸菜（picking）”过程；而把对象从流中读出来的并行化（Deserialization）过程则叫做 “解冻”或者“回鲜(depicking)”过程。</p></blockquote><p>通过实现 Cloneable 接口来实现深克隆比较繁琐，重写 clone方法很复杂，这时候我们可以用 Serializable 来解决</p><p>使用 Serializable，可以把对象写入到流里，然后再从流里读出来，就可以深克隆一个对象。</p><blockquote><p>注意：</p><ol><li>写在流里的是对象的一个拷贝，真正的对象还在内存中。</li><li>对象以及对象内部所有引用到的对象都是可序列化的</li><li>如果不想序列化，则需要使用transient来修饰</li></ol></blockquote><p>我们先实现序列化和反序列化类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeepClone</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2658204965442453698L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oss = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line"></span><br><span class="line">        oss.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们把所有实体类继承该类，同时也相当于实现了 <code>Serializable</code> 接口，实现了序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zoo</span> <span class="keyword">extends</span> <span class="title">DeepClone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">293932665050190715L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">getAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zoo</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">extends</span> <span class="title">DeepClone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">293932665050190715L</span>;</span><br><span class="line">    <span class="keyword">private</span> Pig1 pig1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pig1 <span class="title">getPig1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pig1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPig1</span><span class="params">(Pig1 pig1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pig1 = pig1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(Pig1 pig1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pig1 = pig1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig1</span> <span class="keyword">extends</span> <span class="title">DeepClone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"哼哼哼~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面执行我们的测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java克隆实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bys</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/1 22:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCloneDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Pig1 gxysz = <span class="keyword">new</span> Pig1();</span><br><span class="line">        System.out.println(<span class="string">"---序列化深克隆前"</span>);</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal(gxysz);</span><br><span class="line">        Zoo zoo = <span class="keyword">new</span> Zoo(animal);</span><br><span class="line">        Zoo zoo1 = (Zoo) zoo.deepClone();</span><br><span class="line">        System.out.println(zoo);</span><br><span class="line">        System.out.println(zoo.getAnimal());</span><br><span class="line">        System.out.println(zoo.getAnimal().getPig1());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---序列化深克隆后"</span>);</span><br><span class="line">        System.out.println(zoo1);</span><br><span class="line">        System.out.println(zoo1.getAnimal());</span><br><span class="line">        System.out.println(zoo1.getAnimal().getPig1());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果，可以看到引用类的地址是不同的，同样实现了深克隆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">哼哼哼~~</span><br><span class="line">---序列化深克隆前</span><br><span class="line">javaapi.Zoo@61bbe9ba</span><br><span class="line">javaapi.Animal@610455d6</span><br><span class="line">javaapi.Pig1@266474c2</span><br><span class="line">---序列化深克隆后</span><br><span class="line">javaapi.Zoo@1d81eb93</span><br><span class="line">javaapi.Animal@7291c18f</span><br><span class="line">javaapi.Pig1@34a245ab</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>平时开发中我们是用不到Cloneable的，比较繁琐，还是推荐使用 Apache Commons 包或者 Spring 框架自带的克隆方法</p><p>浅克隆：<code>BeanUtils.cloneBean(Object obj);    BeanUtils.copyProperties(S,T);</code><br>深克隆：<code>SerializationUtils.clone(T object);</code></p><p>BeanUtils利用的是反射机制将属性和方法复制到target类的方式。<br>SerializationUtils使用的是上面的序列化方式实现的深克隆，需要克隆的对象必须要实现序列化接口（Serializable）</p><p>下一篇讲一讲java的反射机制</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是克隆&quot;&gt;&lt;a href=&quot;#什么是克隆&quot; class=&quot;headerlink&quot; title=&quot;什么是克隆&quot;&gt;&lt;/a&gt;什么是克隆&lt;/h2&gt;&lt;p&gt;即将已有数据&lt;strong&gt;完全&lt;/strong&gt;拷贝到一个新对象中。&lt;/p&gt;
&lt;h2 id=&quot;深克隆和浅克隆&quot;&gt;&lt;a href=&quot;#深克隆和浅克隆&quot; class=&quot;headerlink&quot; title=&quot;深克隆和浅克隆&quot;&gt;&lt;/a&gt;深克隆和浅克隆&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;java&lt;/code&gt; 中我们有基本数据类型（八大类型）以及引用数据类型。&lt;br&gt;而这两种类型存放在内存中的位置是不同的，基本类型存放在&lt;strong&gt;栈&lt;/strong&gt;中，而引用类型存放在&lt;strong&gt;堆&lt;/strong&gt;中。&lt;/p&gt;
&lt;p&gt;所以由于以上原因，出现了两种克隆方式，深克隆和浅克隆。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;java&lt;/code&gt; 中，每个实体类都是继承自 &lt;code&gt;java.lang.Object&lt;/code&gt; 父类，&lt;code&gt;Object&lt;/code&gt; 类有一个 &lt;code&gt;clone()&lt;/code&gt; 方法，能够支持对象的克隆。&lt;br&gt;而通过 &lt;code&gt;clone()&lt;/code&gt; 方法生成的对象和 &lt;code&gt;new&lt;/code&gt; 出来的对象区别就是他保留着拷贝对象的属性值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="克隆" scheme="http://yoursite.com/tags/%E5%85%8B%E9%9A%86/"/>
    
  </entry>
  
  <entry>
    <title>Java浮点数精度丢失问题</title>
    <link href="http://yoursite.com/2020/08/14/Java%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/08/14/Java%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-14T10:00:00.000Z</published>
    <updated>2020-08-17T09:15:21.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-精度丢失示例"><a href="#1-精度丢失示例" class="headerlink" title="1. 精度丢失示例"></a>1. 精度丢失示例</h2><p>java做浮点数的除法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">double</span> k = (<span class="keyword">double</span>)a/b;</span><br><span class="line">    <span class="comment">// 四舍五入保留两位小数</span></span><br><span class="line">    <span class="keyword">double</span> i = <span class="keyword">new</span> BigDecimal(k).setScale(<span class="number">2</span>,java.math.BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面的代码输出的结果是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7.000000000000001</span><br></pre></td></tr></table></figure><p>还有另外一个的例子，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="number">1.2</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.19999999999999996</span><br></pre></td></tr></table></figure><h2 id="2-出现原因"><a href="#2-出现原因" class="headerlink" title="2. 出现原因"></a>2. 出现原因</h2><p>出现这个问题的原因，这篇文章已经讲的很清楚了：<a href="https://www.cnblogs.com/backwords/p/9826773.html" target="_blank" rel="noopener">Java 浮点数精度丢失</a><br>简单来说，无论是十进制还是二进制，计算机对这些数进行计算的时候，都是通过不同精度单位的加权（即乘以系数）和来计算的，比如十进制的 <code>15.23</code> 就是 <code>1*10(1次方)+5*10(0次方)+2*10(-1次方)+0.03(-2次方)</code> 得来的，而二进制的 <code>10.101</code> 则是 <code>1*2(1次方)+0*2(0次方)+1*2(-1次方)+0*2(-2次方)+1*2(-3次方)</code> 得到的<br>而上面的 <code>1/15</code> 在计算机那边不能整除，得到结果 <code>0.06666667</code>，得到他的公式 <code>6*10(-2次方)+6*10(-2次方)+6*10(-2次方)+6*10(-2次方)...</code>，所以这个数字在计算机中出现了精度丢失，计算机只能无限接近这个数值，不能完全展示这个数字</p><h2 id="3-java解决办法"><a href="#3-java解决办法" class="headerlink" title="3. java解决办法"></a>3. java解决办法</h2><p>推荐办法是直接使用 <code>java.math.BigDecimal</code> 类来进行计算，对于一些精度要求比较高的场景，比如金额交易场景下，还是强制使用 <code>BigDecimal</code> 的</p><blockquote><p>有可能你会问了，上面不是在浮点数计算完之后使用 <code>BigDecimal</code> 来转换保留小数了吗，为什么还会出现这种情况呢？<br>就是直接使用 <code>new BigDecimal(Double)</code> 构造函数来生成的话仍然会出现精度丢失问题，所以需要注意，使用 <code>BigDecimal</code> 时，一定要将数值先转换成 <strong>字符串</strong>，或者使用 <code>BigDecimal</code> 的 <code>valueOf</code> 方法<br>比如，直接存一个浮点数0.1 <code>BigDecimal b = new BigDecimal(0.1f);</code>，实际上存的数据是 <em>0.100000001490116119384765625</em></p></blockquote><p>那么接下来，我们最开始的错误代码，可以改成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">double</span> k = (<span class="keyword">double</span>)a/b;</span><br><span class="line">    <span class="comment">// 四舍五入保留两位小数</span></span><br><span class="line">    <span class="keyword">double</span> i = BigDecimal().valueOf(k).setScale(<span class="number">2</span>,java.math.BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后输出 <code>0.07</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-精度丢失示例&quot;&gt;&lt;a href=&quot;#1-精度丢失示例&quot; class=&quot;headerlink&quot; title=&quot;1. 精度丢失示例&quot;&gt;&lt;/a&gt;1. 精度丢失示例&lt;/h2&gt;&lt;p&gt;java做浮点数的除法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; k = (&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)a/b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 四舍五入保留两位小数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; i = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigDecimal(k).setScale(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,java.math.BigDecimal.ROUND_HALF_UP).doubleValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="BigDecimal" scheme="http://yoursite.com/tags/BigDecimal/"/>
    
      <category term="精度丢失" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/"/>
    
  </entry>
  
  <entry>
    <title>小老鼠</title>
    <link href="http://yoursite.com/2020/01/12/%E5%B0%8F%E8%80%81%E9%BC%A0/"/>
    <id>http://yoursite.com/2020/01/12/%E5%B0%8F%E8%80%81%E9%BC%A0/</id>
    <published>2020-01-11T17:27:19.000Z</published>
    <updated>2020-08-18T02:38:58.361Z</updated>
    
    <content type="html"><![CDATA[<div class="mouse"><!-- 添加老鼠插件 --><object type="application/x-shockwave-flash" style="outline:none;" data="https://cdn.abowman.com/widgets/hamster/hamster.swf?up_bodyColor=f0e9cc&up_feetColor=D4C898&up_eyeColor=000567&up_wheelSpokeColor=DEDEDE&up_wheelColor=FFFFFF&up_waterColor=E0EFFF&up_earColor=b0c4de&up_wheelOuterColor=FF4D4D&up_snoutColor=F7F4E9&up_bgColor=F0E4E4&up_foodColor=cba920&up_wheelCenterColor=E4EB2F&up_tailColor=E6DEBE&" width="200" height="160"><param name="movie" value="https://cdn.abowman.com/widgets/hamster/hamster.swf?up_bodyColor=f0e9cc&up_feetColor=D4C898&up_eyeColor=000567&up_wheelSpokeColor=DEDEDE&up_wheelColor=FFFFFF&up_waterColor=E0EFFF&up_earColor=b0c4de&up_wheelOuterColor=FF4D4D&up_snoutColor=F7F4E9&up_bgColor=F0E4E4&up_foodColor=cba920&up_wheelCenterColor=E4EB2E&up_tailColor=E6DEBE&"><param name="AllowScriptAccess" value="always"><param name="wmode" value="opaque"></object></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;mouse&quot;&gt;
&lt;!-- 添加老鼠插件 --&gt;
&lt;object type=&quot;application/x-shockwave-flash&quot; style=&quot;outline:none;&quot; data=&quot;https://cdn.abowman.com/widgets
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>简单使用</title>
    <link href="http://yoursite.com/2020/01/09/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/01/09/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2020-01-09T02:18:01.290Z</published>
    <updated>2020-08-18T02:38:48.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"name"</span></span><br></pre></td></tr></table></figure><h3 id="快速提交"><a href="#快速提交" class="headerlink" title="快速提交"></a>快速提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; title=&quot;快速开始&quot;&gt;&lt;/a&gt;快速开始&lt;/h2&gt;&lt;h3 id=&quot;创建文章&quot;&gt;&lt;a href=&quot;#创建文章&quot; class=&quot;headerlink&quot; title=&quot;创建文章&quot;&gt;&lt;/a&gt;创建文章&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;快速提交&quot;&gt;&lt;a href=&quot;#快速提交&quot; class=&quot;headerlink&quot; title=&quot;快速提交&quot;&gt;&lt;/a&gt;快速提交&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo generate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo使用" scheme="http://yoursite.com/tags/Hexo%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
</feed>
